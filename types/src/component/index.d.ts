import { LitElement, type CSSResult } from 'lit';
import { type AnimationDirection, type AnimationItem, type AnimationSegment, type RendererType } from 'lottie-web';
import { PlayMode, PlayerState } from './utils';
import type { AnimationSettings, AnimationConfig, Autoplay, Controls, Loop, LottieJSON, LottieManifest, ObjectFit, PreserveAspectRatio, Subframe } from './types';
export declare class DotLottiePlayer extends LitElement {
    autoplay?: Autoplay;
    background?: string;
    controls?: Controls;
    count?: number;
    currentState?: PlayerState;
    description?: string;
    direction?: AnimationDirection;
    hover?: boolean | undefined;
    intermission?: number | undefined;
    loop?: Loop;
    mode?: PlayMode;
    multiAnimationSettings?: AnimationSettings[];
    objectfit?: ObjectFit;
    preserveAspectRatio?: PreserveAspectRatio;
    renderer?: RendererType;
    segment?: AnimationSegment;
    simple?: boolean;
    speed?: number;
    src: string;
    subframe?: Subframe;
    protected container: HTMLElement;
    private _isSettingsOpen;
    private _seeker;
    private _currentAnimation;
    private _intersectionObserver?;
    private _lottieInstance;
    private _identifier;
    private _errorMessage;
    private _isBounce;
    private _isDotLottie;
    private _manifest;
    private _animations;
    private _playerState;
    private _getOptions;
    load(src: string | LottieJSON): Promise<void>;
    getManifest(): LottieManifest;
    private _addEventListeners;
    private _mouseEnter;
    private _mouseLeave;
    private _onVisibilityChange;
    private _handleSeekChange;
    private _isLottie;
    addAnimation(configs: AnimationConfig[], fileName?: string, triggerDownload?: boolean): Promise<void | ArrayBuffer>;
    getLottie(): AnimationItem | null;
    play(): void;
    pause(): void;
    stop(): void;
    destroy(): void;
    seek(value: number | string): void;
    snapshot(): string | undefined;
    setSubframe(value: boolean): void;
    private _freeze;
    reload(): Promise<void>;
    setSpeed(value?: number): void;
    setDirection(value: AnimationDirection): void;
    setLooping(value: boolean): void;
    setMultiAnimationSettings(settings: AnimationSettings[]): void;
    togglePlay(): void;
    toggleLooping(): void;
    toggleBoomerang(): void;
    private _toggleSettings;
    private _handleSettingsClick;
    private _handleBlur;
    private _switchInstance;
    next(): void;
    prev(): void;
    convert(typeCheck?: boolean, manifest?: LottieManifest, animations?: LottieJSON[], fileName?: string, download?: boolean): Promise<void | ArrayBuffer> | undefined;
    static get styles(): CSSResult;
    constructor();
    connectedCallback(): void;
    protected firstUpdated(): Promise<void>;
    disconnectedCallback(): void;
    protected renderControls(): import("lit").TemplateResult<1>;
    protected render(): import("lit").TemplateResult<1>;
}
